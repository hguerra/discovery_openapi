/* tslint:disable */
/* eslint-disable */
/**
 * Redocly Museum API
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@redocly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { MuseumDailyHours } from '../model';
/**
 * OperationsApi - axios parameter creator
 * @export
 */
export const OperationsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get upcoming museum operating hours
         * @summary Get museum hours
         * @param {string} [startDate] The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of days per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMuseumHours: async (startDate?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/museum-hours`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperationsApi - functional programming interface
 * @export
 */
export const OperationsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OperationsApiAxiosParamCreator(configuration)
    return {
        /**
         * Get upcoming museum operating hours
         * @summary Get museum hours
         * @param {string} [startDate] The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of days per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMuseumHours(startDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MuseumDailyHours>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getMuseumHours(startDate, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['OperationsApi.getMuseumHours']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * OperationsApi - factory interface
 * @export
 */
export const OperationsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OperationsApiFp(configuration)
    return {
        /**
         * Get upcoming museum operating hours
         * @summary Get museum hours
         * @param {OperationsApiGetMuseumHoursRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMuseumHours(requestParameters: OperationsApiGetMuseumHoursRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<MuseumDailyHours>> {
            return localVarFp.getMuseumHours(requestParameters.startDate, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for getMuseumHours operation in OperationsApi.
 * @export
 * @interface OperationsApiGetMuseumHoursRequest
 */
export interface OperationsApiGetMuseumHoursRequest {
    /**
     * The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
     * @type {string}
     * @memberof OperationsApiGetMuseumHours
     */
    readonly startDate?: string

    /**
     * The page number to retrieve.
     * @type {number}
     * @memberof OperationsApiGetMuseumHours
     */
    readonly page?: number

    /**
     * The number of days per page.
     * @type {number}
     * @memberof OperationsApiGetMuseumHours
     */
    readonly limit?: number
}

/**
 * OperationsApi - object-oriented interface
 * @export
 * @class OperationsApi
 * @extends {BaseAPI}
 */
export class OperationsApi extends BaseAPI {
    /**
     * Get upcoming museum operating hours
     * @summary Get museum hours
     * @param {OperationsApiGetMuseumHoursRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperationsApi
     */
    public getMuseumHours(requestParameters: OperationsApiGetMuseumHoursRequest = {}, options?: RawAxiosRequestConfig) {
        return OperationsApiFp(this.configuration).getMuseumHours(requestParameters.startDate, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }
}

