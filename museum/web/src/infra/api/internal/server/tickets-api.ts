/* tslint:disable */
/* eslint-disable */
/**
 * Redocly Museum API
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@redocly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { BuyMuseumTicketsRequest } from '../model';
// @ts-ignore
import type { BuyMuseumTicketsResponse } from '../model';
/**
 * TicketsApi - axios parameter creator
 * @export
 */
export const TicketsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Purchase museum tickets for general entry or special events.
         * @summary Buy museum tickets
         * @param {BuyMuseumTicketsRequest} buyMuseumTicketsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyMuseumTickets: async (buyMuseumTicketsRequest: BuyMuseumTicketsRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'buyMuseumTicketsRequest' is not null or undefined
            assertParamExists('buyMuseumTickets', 'buyMuseumTicketsRequest', buyMuseumTicketsRequest)
            const localVarPath = `/tickets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(buyMuseumTicketsRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return an image of your ticket with scannable QR code. Used for event entry.
         * @summary Get ticket QR code
         * @param {string} ticketId An identifier for a ticket to a museum event. Used to generate ticket image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketCode: async (ticketId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'ticketId' is not null or undefined
            assertParamExists('getTicketCode', 'ticketId', ticketId)
            const localVarPath = `/tickets/{ticketId}/qr`
                .replace(`{${"ticketId"}}`, encodeURIComponent(String(ticketId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TicketsApi - functional programming interface
 * @export
 */
export const TicketsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TicketsApiAxiosParamCreator(configuration)
    return {
        /**
         * Purchase museum tickets for general entry or special events.
         * @summary Buy museum tickets
         * @param {BuyMuseumTicketsRequest} buyMuseumTicketsRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async buyMuseumTickets(buyMuseumTicketsRequest: BuyMuseumTicketsRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BuyMuseumTicketsResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.buyMuseumTickets(buyMuseumTicketsRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.buyMuseumTickets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return an image of your ticket with scannable QR code. Used for event entry.
         * @summary Get ticket QR code
         * @param {string} ticketId An identifier for a ticket to a museum event. Used to generate ticket image.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTicketCode(ticketId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<File>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTicketCode(ticketId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TicketsApi.getTicketCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TicketsApi - factory interface
 * @export
 */
export const TicketsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TicketsApiFp(configuration)
    return {
        /**
         * Purchase museum tickets for general entry or special events.
         * @summary Buy museum tickets
         * @param {TicketsApiBuyMuseumTicketsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        buyMuseumTickets(requestParameters: TicketsApiBuyMuseumTicketsRequest, options?: RawAxiosRequestConfig): AxiosPromise<BuyMuseumTicketsResponse> {
            return localVarFp.buyMuseumTickets(requestParameters.buyMuseumTicketsRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Return an image of your ticket with scannable QR code. Used for event entry.
         * @summary Get ticket QR code
         * @param {TicketsApiGetTicketCodeRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTicketCode(requestParameters: TicketsApiGetTicketCodeRequest, options?: RawAxiosRequestConfig): AxiosPromise<File> {
            return localVarFp.getTicketCode(requestParameters.ticketId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for buyMuseumTickets operation in TicketsApi.
 * @export
 * @interface TicketsApiBuyMuseumTicketsRequest
 */
export interface TicketsApiBuyMuseumTicketsRequest {
    /**
     * 
     * @type {BuyMuseumTicketsRequest}
     * @memberof TicketsApiBuyMuseumTickets
     */
    readonly buyMuseumTicketsRequest: BuyMuseumTicketsRequest
}

/**
 * Request parameters for getTicketCode operation in TicketsApi.
 * @export
 * @interface TicketsApiGetTicketCodeRequest
 */
export interface TicketsApiGetTicketCodeRequest {
    /**
     * An identifier for a ticket to a museum event. Used to generate ticket image.
     * @type {string}
     * @memberof TicketsApiGetTicketCode
     */
    readonly ticketId: string
}

/**
 * TicketsApi - object-oriented interface
 * @export
 * @class TicketsApi
 * @extends {BaseAPI}
 */
export class TicketsApi extends BaseAPI {
    /**
     * Purchase museum tickets for general entry or special events.
     * @summary Buy museum tickets
     * @param {TicketsApiBuyMuseumTicketsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public buyMuseumTickets(requestParameters: TicketsApiBuyMuseumTicketsRequest, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).buyMuseumTickets(requestParameters.buyMuseumTicketsRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return an image of your ticket with scannable QR code. Used for event entry.
     * @summary Get ticket QR code
     * @param {TicketsApiGetTicketCodeRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TicketsApi
     */
    public getTicketCode(requestParameters: TicketsApiGetTicketCodeRequest, options?: RawAxiosRequestConfig) {
        return TicketsApiFp(this.configuration).getTicketCode(requestParameters.ticketId, options).then((request) => request(this.axios, this.basePath));
    }
}

