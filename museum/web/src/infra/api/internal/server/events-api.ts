/* tslint:disable */
/* eslint-disable */
/**
 * Redocly Museum API
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: team@redocly.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { CreateSpecialEventRequest } from '../model';
// @ts-ignore
import type { SpecialEventResponse } from '../model';
// @ts-ignore
import type { UpdateSpecialEventRequest } from '../model';
/**
 * EventsApi - axios parameter creator
 * @export
 */
export const EventsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create special event
         * @param {CreateSpecialEventRequest} createSpecialEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpecialEvent: async (createSpecialEventRequest: CreateSpecialEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createSpecialEventRequest' is not null or undefined
            assertParamExists('createSpecialEvent', 'createSpecialEventRequest', createSpecialEventRequest)
            const localVarPath = `/special-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createSpecialEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Delete a special event from the collection. Allows museum to cancel planned events.
         * @summary Delete special event
         * @param {string} eventId An identifier for a special event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecialEvent: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('deleteSpecialEvent', 'eventId', eventId)
            const localVarPath = `/special-events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get details about a special event.
         * @summary Get special event
         * @param {string} eventId An identifier for a special event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialEvent: async (eventId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('getSpecialEvent', 'eventId', eventId)
            const localVarPath = `/special-events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Return a list of upcoming special events at the museum.
         * @summary List special events
         * @param {string} [startDate] The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
         * @param {string} [endDate] The end of a date range to retrieve special events for. Defaults to 7 days after &#x60;startDate&#x60;.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of days per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpecialEvents: async (startDate?: string, endDate?: string, page?: number, limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/special-events`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startDate !== undefined) {
                localVarQueryParameter['startDate'] = (startDate as any instanceof Date) ?
                    (startDate as any).toISOString().substring(0,10) :
                    startDate;
            }

            if (endDate !== undefined) {
                localVarQueryParameter['endDate'] = (endDate as any instanceof Date) ?
                    (endDate as any).toISOString().substring(0,10) :
                    endDate;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update the details of a special event
         * @summary Update special event
         * @param {string} eventId An identifier for a special event.
         * @param {UpdateSpecialEventRequest} updateSpecialEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialEvent: async (eventId: string, updateSpecialEventRequest: UpdateSpecialEventRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'eventId' is not null or undefined
            assertParamExists('updateSpecialEvent', 'eventId', eventId)
            // verify required parameter 'updateSpecialEventRequest' is not null or undefined
            assertParamExists('updateSpecialEvent', 'updateSpecialEventRequest', updateSpecialEventRequest)
            const localVarPath = `/special-events/{eventId}`
                .replace(`{${"eventId"}}`, encodeURIComponent(String(eventId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication MuseumPlaceholderAuth required
            // http basic authentication required
            setBasicAuthToObject(localVarRequestOptions, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateSpecialEventRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * EventsApi - functional programming interface
 * @export
 */
export const EventsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = EventsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create special event
         * @param {CreateSpecialEventRequest} createSpecialEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createSpecialEvent(createSpecialEventRequest: CreateSpecialEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createSpecialEvent(createSpecialEventRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.createSpecialEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Delete a special event from the collection. Allows museum to cancel planned events.
         * @summary Delete special event
         * @param {string} eventId An identifier for a special event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteSpecialEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteSpecialEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.deleteSpecialEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Get details about a special event.
         * @summary Get special event
         * @param {string} eventId An identifier for a special event.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSpecialEvent(eventId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getSpecialEvent(eventId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.getSpecialEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Return a list of upcoming special events at the museum.
         * @summary List special events
         * @param {string} [startDate] The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
         * @param {string} [endDate] The end of a date range to retrieve special events for. Defaults to 7 days after &#x60;startDate&#x60;.
         * @param {number} [page] The page number to retrieve.
         * @param {number} [limit] The number of days per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listSpecialEvents(startDate?: string, endDate?: string, page?: number, limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SpecialEventResponse>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listSpecialEvents(startDate, endDate, page, limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.listSpecialEvents']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * Update the details of a special event
         * @summary Update special event
         * @param {string} eventId An identifier for a special event.
         * @param {UpdateSpecialEventRequest} updateSpecialEventRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateSpecialEvent(eventId: string, updateSpecialEventRequest: UpdateSpecialEventRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SpecialEventResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateSpecialEvent(eventId, updateSpecialEventRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['EventsApi.updateSpecialEvent']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * EventsApi - factory interface
 * @export
 */
export const EventsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = EventsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create special event
         * @param {EventsApiCreateSpecialEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createSpecialEvent(requestParameters: EventsApiCreateSpecialEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpecialEventResponse> {
            return localVarFp.createSpecialEvent(requestParameters.createSpecialEventRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Delete a special event from the collection. Allows museum to cancel planned events.
         * @summary Delete special event
         * @param {EventsApiDeleteSpecialEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteSpecialEvent(requestParameters: EventsApiDeleteSpecialEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteSpecialEvent(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * Get details about a special event.
         * @summary Get special event
         * @param {EventsApiGetSpecialEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSpecialEvent(requestParameters: EventsApiGetSpecialEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpecialEventResponse> {
            return localVarFp.getSpecialEvent(requestParameters.eventId, options).then((request) => request(axios, basePath));
        },
        /**
         * Return a list of upcoming special events at the museum.
         * @summary List special events
         * @param {EventsApiListSpecialEventsRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listSpecialEvents(requestParameters: EventsApiListSpecialEventsRequest = {}, options?: RawAxiosRequestConfig): AxiosPromise<Array<SpecialEventResponse>> {
            return localVarFp.listSpecialEvents(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, options).then((request) => request(axios, basePath));
        },
        /**
         * Update the details of a special event
         * @summary Update special event
         * @param {EventsApiUpdateSpecialEventRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateSpecialEvent(requestParameters: EventsApiUpdateSpecialEventRequest, options?: RawAxiosRequestConfig): AxiosPromise<SpecialEventResponse> {
            return localVarFp.updateSpecialEvent(requestParameters.eventId, requestParameters.updateSpecialEventRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for createSpecialEvent operation in EventsApi.
 * @export
 * @interface EventsApiCreateSpecialEventRequest
 */
export interface EventsApiCreateSpecialEventRequest {
    /**
     * 
     * @type {CreateSpecialEventRequest}
     * @memberof EventsApiCreateSpecialEvent
     */
    readonly createSpecialEventRequest: CreateSpecialEventRequest
}

/**
 * Request parameters for deleteSpecialEvent operation in EventsApi.
 * @export
 * @interface EventsApiDeleteSpecialEventRequest
 */
export interface EventsApiDeleteSpecialEventRequest {
    /**
     * An identifier for a special event.
     * @type {string}
     * @memberof EventsApiDeleteSpecialEvent
     */
    readonly eventId: string
}

/**
 * Request parameters for getSpecialEvent operation in EventsApi.
 * @export
 * @interface EventsApiGetSpecialEventRequest
 */
export interface EventsApiGetSpecialEventRequest {
    /**
     * An identifier for a special event.
     * @type {string}
     * @memberof EventsApiGetSpecialEvent
     */
    readonly eventId: string
}

/**
 * Request parameters for listSpecialEvents operation in EventsApi.
 * @export
 * @interface EventsApiListSpecialEventsRequest
 */
export interface EventsApiListSpecialEventsRequest {
    /**
     * The starting date to retrieve future operating hours from. Defaults to today\&#39;s date.
     * @type {string}
     * @memberof EventsApiListSpecialEvents
     */
    readonly startDate?: string

    /**
     * The end of a date range to retrieve special events for. Defaults to 7 days after &#x60;startDate&#x60;.
     * @type {string}
     * @memberof EventsApiListSpecialEvents
     */
    readonly endDate?: string

    /**
     * The page number to retrieve.
     * @type {number}
     * @memberof EventsApiListSpecialEvents
     */
    readonly page?: number

    /**
     * The number of days per page.
     * @type {number}
     * @memberof EventsApiListSpecialEvents
     */
    readonly limit?: number
}

/**
 * Request parameters for updateSpecialEvent operation in EventsApi.
 * @export
 * @interface EventsApiUpdateSpecialEventRequest
 */
export interface EventsApiUpdateSpecialEventRequest {
    /**
     * An identifier for a special event.
     * @type {string}
     * @memberof EventsApiUpdateSpecialEvent
     */
    readonly eventId: string

    /**
     * 
     * @type {UpdateSpecialEventRequest}
     * @memberof EventsApiUpdateSpecialEvent
     */
    readonly updateSpecialEventRequest: UpdateSpecialEventRequest
}

/**
 * EventsApi - object-oriented interface
 * @export
 * @class EventsApi
 * @extends {BaseAPI}
 */
export class EventsApi extends BaseAPI {
    /**
     * 
     * @summary Create special event
     * @param {EventsApiCreateSpecialEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public createSpecialEvent(requestParameters: EventsApiCreateSpecialEventRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).createSpecialEvent(requestParameters.createSpecialEventRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Delete a special event from the collection. Allows museum to cancel planned events.
     * @summary Delete special event
     * @param {EventsApiDeleteSpecialEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public deleteSpecialEvent(requestParameters: EventsApiDeleteSpecialEventRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).deleteSpecialEvent(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Get details about a special event.
     * @summary Get special event
     * @param {EventsApiGetSpecialEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public getSpecialEvent(requestParameters: EventsApiGetSpecialEventRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).getSpecialEvent(requestParameters.eventId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Return a list of upcoming special events at the museum.
     * @summary List special events
     * @param {EventsApiListSpecialEventsRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public listSpecialEvents(requestParameters: EventsApiListSpecialEventsRequest = {}, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).listSpecialEvents(requestParameters.startDate, requestParameters.endDate, requestParameters.page, requestParameters.limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Update the details of a special event
     * @summary Update special event
     * @param {EventsApiUpdateSpecialEventRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof EventsApi
     */
    public updateSpecialEvent(requestParameters: EventsApiUpdateSpecialEventRequest, options?: RawAxiosRequestConfig) {
        return EventsApiFp(this.configuration).updateSpecialEvent(requestParameters.eventId, requestParameters.updateSpecialEventRequest, options).then((request) => request(this.axios, this.basePath));
    }
}

