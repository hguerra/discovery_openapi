// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// TicketsAPIController binds http requests to an api service and writes the service results to the http response
type TicketsAPIController struct {
	service TicketsAPIServicer
	errorHandler ErrorHandler
}

// TicketsAPIOption for how the controller is set up.
type TicketsAPIOption func(*TicketsAPIController)

// WithTicketsAPIErrorHandler inject ErrorHandler into controller
func WithTicketsAPIErrorHandler(h ErrorHandler) TicketsAPIOption {
	return func(c *TicketsAPIController) {
		c.errorHandler = h
	}
}

// NewTicketsAPIController creates a default api controller
func NewTicketsAPIController(s TicketsAPIServicer, opts ...TicketsAPIOption) *TicketsAPIController {
	controller := &TicketsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TicketsAPIController
func (c *TicketsAPIController) Routes() Routes {
	return Routes{
		"BuyMuseumTickets": Route{
			strings.ToUpper("Post"),
			"/v1/tickets",
			c.BuyMuseumTickets,
		},
		"GetTicketCode": Route{
			strings.ToUpper("Get"),
			"/v1/tickets/{ticketId}/qr",
			c.GetTicketCode,
		},
	}
}

// BuyMuseumTickets - Buy museum tickets
func (c *TicketsAPIController) BuyMuseumTickets(w http.ResponseWriter, r *http.Request) {
	buyMuseumTicketsRequestParam := BuyMuseumTicketsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&buyMuseumTicketsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBuyMuseumTicketsRequestRequired(buyMuseumTicketsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBuyMuseumTicketsRequestConstraints(buyMuseumTicketsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BuyMuseumTickets(r.Context(), buyMuseumTicketsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTicketCode - Get ticket QR code
func (c *TicketsAPIController) GetTicketCode(w http.ResponseWriter, r *http.Request) {
	ticketIdParam := chi.URLParam(r, "ticketId")
	if ticketIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"ticketId"}, nil)
		return
	}
	result, err := c.service.GetTicketCode(r.Context(), ticketIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
