// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api

import (
	"context"
	"net/http"
)



// EventsAPIRouter defines the required methods for binding the api requests to a responses for the EventsAPI
// The EventsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EventsAPIServicer to perform the required actions, then write the service results to the http response.
type EventsAPIRouter interface { 
	CreateSpecialEvent(http.ResponseWriter, *http.Request)
	DeleteSpecialEvent(http.ResponseWriter, *http.Request)
	GetSpecialEvent(http.ResponseWriter, *http.Request)
	ListSpecialEvents(http.ResponseWriter, *http.Request)
	UpdateSpecialEvent(http.ResponseWriter, *http.Request)
}
// OperationsAPIRouter defines the required methods for binding the api requests to a responses for the OperationsAPI
// The OperationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a OperationsAPIServicer to perform the required actions, then write the service results to the http response.
type OperationsAPIRouter interface { 
	GetMuseumHours(http.ResponseWriter, *http.Request)
}
// TicketsAPIRouter defines the required methods for binding the api requests to a responses for the TicketsAPI
// The TicketsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TicketsAPIServicer to perform the required actions, then write the service results to the http response.
type TicketsAPIRouter interface { 
	BuyMuseumTickets(http.ResponseWriter, *http.Request)
	GetTicketCode(http.ResponseWriter, *http.Request)
}


// EventsAPIServicer defines the api actions for the EventsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EventsAPIServicer interface { 
	CreateSpecialEvent(context.Context, CreateSpecialEventRequest) (ImplResponse, error)
	DeleteSpecialEvent(context.Context, string) (ImplResponse, error)
	GetSpecialEvent(context.Context, string) (ImplResponse, error)
	ListSpecialEvents(context.Context, string, string, int32, int32) (ImplResponse, error)
	UpdateSpecialEvent(context.Context, string, UpdateSpecialEventRequest) (ImplResponse, error)
}


// OperationsAPIServicer defines the api actions for the OperationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type OperationsAPIServicer interface { 
	GetMuseumHours(context.Context, string, int32, int32) (ImplResponse, error)
}


// TicketsAPIServicer defines the api actions for the TicketsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TicketsAPIServicer interface { 
	BuyMuseumTickets(context.Context, BuyMuseumTicketsRequest) (ImplResponse, error)
	GetTicketCode(context.Context, string) (ImplResponse, error)
}
