// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/go-chi/chi/v5"
)

// EventsAPIController binds http requests to an api service and writes the service results to the http response
type EventsAPIController struct {
	service EventsAPIServicer
	errorHandler ErrorHandler
}

// EventsAPIOption for how the controller is set up.
type EventsAPIOption func(*EventsAPIController)

// WithEventsAPIErrorHandler inject ErrorHandler into controller
func WithEventsAPIErrorHandler(h ErrorHandler) EventsAPIOption {
	return func(c *EventsAPIController) {
		c.errorHandler = h
	}
}

// NewEventsAPIController creates a default api controller
func NewEventsAPIController(s EventsAPIServicer, opts ...EventsAPIOption) *EventsAPIController {
	controller := &EventsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EventsAPIController
func (c *EventsAPIController) Routes() Routes {
	return Routes{
		"CreateSpecialEvent": Route{
			strings.ToUpper("Post"),
			"/v1/special-events",
			c.CreateSpecialEvent,
		},
		"DeleteSpecialEvent": Route{
			strings.ToUpper("Delete"),
			"/v1/special-events/{eventId}",
			c.DeleteSpecialEvent,
		},
		"GetSpecialEvent": Route{
			strings.ToUpper("Get"),
			"/v1/special-events/{eventId}",
			c.GetSpecialEvent,
		},
		"ListSpecialEvents": Route{
			strings.ToUpper("Get"),
			"/v1/special-events",
			c.ListSpecialEvents,
		},
		"UpdateSpecialEvent": Route{
			strings.ToUpper("Patch"),
			"/v1/special-events/{eventId}",
			c.UpdateSpecialEvent,
		},
	}
}

// CreateSpecialEvent - Create special event
func (c *EventsAPIController) CreateSpecialEvent(w http.ResponseWriter, r *http.Request) {
	createSpecialEventRequestParam := CreateSpecialEventRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateSpecialEventRequestRequired(createSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateSpecialEventRequestConstraints(createSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSpecialEvent(r.Context(), createSpecialEventRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSpecialEvent - Delete special event
func (c *EventsAPIController) DeleteSpecialEvent(w http.ResponseWriter, r *http.Request) {
	eventIdParam := chi.URLParam(r, "eventId")
	if eventIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"eventId"}, nil)
		return
	}
	result, err := c.service.DeleteSpecialEvent(r.Context(), eventIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSpecialEvent - Get special event
func (c *EventsAPIController) GetSpecialEvent(w http.ResponseWriter, r *http.Request) {
	eventIdParam := chi.URLParam(r, "eventId")
	if eventIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"eventId"}, nil)
		return
	}
	result, err := c.service.GetSpecialEvent(r.Context(), eventIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListSpecialEvents - List special events
func (c *EventsAPIController) ListSpecialEvents(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam string
	if query.Has("startDate") {
		param := string(query.Get("startDate"))

		startDateParam = param
	} else {
	}
	var endDateParam string
	if query.Has("endDate") {
		param := string(query.Get("endDate"))

		endDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](30),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.ListSpecialEvents(r.Context(), startDateParam, endDateParam, pageParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateSpecialEvent - Update special event
func (c *EventsAPIController) UpdateSpecialEvent(w http.ResponseWriter, r *http.Request) {
	eventIdParam := chi.URLParam(r, "eventId")
	if eventIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"eventId"}, nil)
		return
	}
	updateSpecialEventRequestParam := UpdateSpecialEventRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateSpecialEventRequestRequired(updateSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateSpecialEventRequestConstraints(updateSpecialEventRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSpecialEvent(r.Context(), eventIdParam, updateSpecialEventRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
