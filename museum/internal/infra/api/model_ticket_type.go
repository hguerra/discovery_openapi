// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api


import (
	"fmt"
)


// TicketType : Type of ticket being purchased. Use `general` for regular museum entry and `event` for tickets to special events.
type TicketType string

// List of TicketType
const (
	EVENT TicketType = "event"
	GENERAL TicketType = "general"
)

// AllowedTicketTypeEnumValues is all the allowed values of TicketType enum
var AllowedTicketTypeEnumValues = []TicketType{
	"event",
	"general",
}

// validTicketTypeEnumValue provides a map of TicketTypes for fast verification of use input
var validTicketTypeEnumValues = map[TicketType]struct{}{
	"event": {},
	"general": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TicketType) IsValid() bool {
	_, ok := validTicketTypeEnumValues[v]
	return ok
}

// NewTicketTypeFromValue returns a pointer to a valid TicketType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTicketTypeFromValue(v string) (TicketType, error) {
	ev := TicketType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for TicketType: valid values are %v", v, AllowedTicketTypeEnumValues)
}



// AssertTicketTypeRequired checks if the required fields are not zero-ed
func AssertTicketTypeRequired(obj TicketType) error {
	return nil
}

// AssertTicketTypeConstraints checks if the values respects the defined constraints
func AssertTicketTypeConstraints(obj TicketType) error {
	return nil
}
