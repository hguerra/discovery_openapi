// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api

import (
	"net/http"
	"strings"
)

// OperationsAPIController binds http requests to an api service and writes the service results to the http response
type OperationsAPIController struct {
	service OperationsAPIServicer
	errorHandler ErrorHandler
}

// OperationsAPIOption for how the controller is set up.
type OperationsAPIOption func(*OperationsAPIController)

// WithOperationsAPIErrorHandler inject ErrorHandler into controller
func WithOperationsAPIErrorHandler(h ErrorHandler) OperationsAPIOption {
	return func(c *OperationsAPIController) {
		c.errorHandler = h
	}
}

// NewOperationsAPIController creates a default api controller
func NewOperationsAPIController(s OperationsAPIServicer, opts ...OperationsAPIOption) *OperationsAPIController {
	controller := &OperationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OperationsAPIController
func (c *OperationsAPIController) Routes() Routes {
	return Routes{
		"GetMuseumHours": Route{
			strings.ToUpper("Get"),
			"/v1/museum-hours",
			c.GetMuseumHours,
		},
	}
}

// GetMuseumHours - Get museum hours
func (c *OperationsAPIController) GetMuseumHours(w http.ResponseWriter, r *http.Request) {
	query, err := parseQuery(r.URL.RawQuery)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startDateParam string
	if query.Has("startDate") {
		param := string(query.Get("startDate"))

		startDateParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "page", Err: err}, nil)
			return
		}

		pageParam = param
	} else {
		var param int32 = 1
		pageParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](30),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Param: "limit", Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.GetMuseumHours(r.Context(), startDateParam, pageParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	_ = EncodeJSONResponse(result.Body, &result.Code, w)
}
