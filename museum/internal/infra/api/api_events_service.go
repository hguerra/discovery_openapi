// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * Redocly Museum API
 *
 * An imaginary, but delightful Museum API for interacting with museum services and information. Built with love by Redocly.
 *
 * API version: 1.0.0
 * Contact: team@redocly.com
 */

package api

import (
	"context"
	"net/http"
	"errors"
)

// EventsAPIService is a service that implements the logic for the EventsAPIServicer
// This service should implement the business logic for every endpoint for the EventsAPI API.
// Include any external packages or services that will be required by this service.
type EventsAPIService struct {
}

// NewEventsAPIService creates a default api service
func NewEventsAPIService() *EventsAPIService {
	return &EventsAPIService{}
}

// CreateSpecialEvent - Create special event
func (s *EventsAPIService) CreateSpecialEvent(ctx context.Context, createSpecialEventRequest CreateSpecialEventRequest) (ImplResponse, error) {
	// TODO - update CreateSpecialEvent with the required logic for this service method.
	// Add api_events_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, SpecialEventResponse{}) or use other options such as http.Ok ...
	// return Response(200, SpecialEventResponse{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateSpecialEvent method not implemented")
}

// DeleteSpecialEvent - Delete special event
func (s *EventsAPIService) DeleteSpecialEvent(ctx context.Context, eventId string) (ImplResponse, error) {
	// TODO - update DeleteSpecialEvent with the required logic for this service method.
	// Add api_events_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteSpecialEvent method not implemented")
}

// GetSpecialEvent - Get special event
func (s *EventsAPIService) GetSpecialEvent(ctx context.Context, eventId string) (ImplResponse, error) {
	// TODO - update GetSpecialEvent with the required logic for this service method.
	// Add api_events_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, SpecialEventResponse{}) or use other options such as http.Ok ...
	// return Response(200, SpecialEventResponse{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSpecialEvent method not implemented")
}

// ListSpecialEvents - List special events
func (s *EventsAPIService) ListSpecialEvents(ctx context.Context, startDate string, endDate string, page int32, limit int32) (ImplResponse, error) {
	// TODO - update ListSpecialEvents with the required logic for this service method.
	// Add api_events_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []SpecialEventResponse{}) or use other options such as http.Ok ...
	// return Response(200, []SpecialEventResponse{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListSpecialEvents method not implemented")
}

// UpdateSpecialEvent - Update special event
func (s *EventsAPIService) UpdateSpecialEvent(ctx context.Context, eventId string, updateSpecialEventRequest UpdateSpecialEventRequest) (ImplResponse, error) {
	// TODO - update UpdateSpecialEvent with the required logic for this service method.
	// Add api_events_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, SpecialEventResponse{}) or use other options such as http.Ok ...
	// return Response(200, SpecialEventResponse{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateSpecialEvent method not implemented")
}
